!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BINDIR	../Makefile	/^BINDIR=bin$/;"	m
CC	../Makefile	/^CC=g++$/;"	m
CFLAGS	../Makefile	/^CFLAGS=-c -Wall -g$/;"	m
INCLDIR	../Makefile	/^INCLDIR=include$/;"	m
INCLUDES	../Makefile	/^INCLUDES := $(wildcard $(INCLDIR)\/*.h)$/;"	m
JOB_H	../include/job.h	2;"	d
Job	../include/job.h	/^	Job(short int id);$/;"	p	class:Job	access:public	signature:(short int id)
Job	../include/job.h	/^class Job {$/;"	c
Job	../src/job.cpp	/^Job::Job(short int id) {$/;"	f	class:Job	signature:(short int id)
Job::Job	../include/job.h	/^	Job(short int id);$/;"	p	class:Job	access:public	signature:(short int id)
Job::Job	../src/job.cpp	/^Job::Job(short int id) {$/;"	f	class:Job	signature:(short int id)
Job::Tasks	../include/job.h	/^		std::vector<Task*> Tasks;$/;"	m	class:Job	access:private
Job::addTask	../include/job.h	/^		void addTask(Task* task);$/;"	p	class:Job	access:public	signature:(Task* task)
Job::addTask	../src/job.cpp	/^void Job::addTask(Task* task) {$/;"	f	class:Job	signature:(Task* task)
Job::duration	../include/job.h	/^		short int duration;$/;"	m	class:Job	access:private
Job::getJobDuration	../include/job.h	/^		short int getJobDuration();$/;"	p	class:Job	access:public	signature:()
Job::getJobDuration	../src/job.cpp	/^short int Job::getJobDuration() {$/;"	f	class:Job	signature:()
Job::getJobId	../include/job.h	/^		short int getJobId();$/;"	p	class:Job	access:public	signature:()
Job::getJobId	../src/job.cpp	/^short int Job::getJobId() {$/;"	f	class:Job	signature:()
Job::getStartTime	../include/job.h	/^		short int getStartTime();$/;"	p	class:Job	access:public	signature:()
Job::getStartTime	../src/job.cpp	/^short int Job::getStartTime() {$/;"	f	class:Job	signature:()
Job::getTask	../include/job.h	/^		Task* getTask(short int taskId);$/;"	p	class:Job	access:public	signature:(short int taskId)
Job::getTask	../src/job.cpp	/^Task* Job::getTask(short int taskId) {$/;"	f	class:Job	signature:(short int taskId)
Job::id	../include/job.h	/^		short int id;$/;"	m	class:Job	access:private
Job::setDuration	../include/job.h	/^		void setDuration(short int dur);$/;"	p	class:Job	access:public	signature:(short int dur)
Job::setDuration	../src/job.cpp	/^void Job::setDuration(short int dur) {$/;"	f	class:Job	signature:(short int dur)
Job::setStartTime	../include/job.h	/^		void setStartTime(short int t);$/;"	p	class:Job	access:public	signature:(short int t)
Job::setStartTime	../src/job.cpp	/^void Job::setStartTime(short int t) {$/;"	f	class:Job	signature:(short int t)
Job::startTime	../include/job.h	/^		short int startTime;$/;"	m	class:Job	access:private
Job::~Job	../include/job.h	/^	~Job();$/;"	p	class:Job	access:public	signature:()
Job::~Job	../src/job.cpp	/^Job::~Job() {$/;"	f	class:Job	signature:()
Jobs	../include/scheduler.h	/^		std::vector<Job*> Jobs;		\/\/ job list$/;"	m	class:Scheduler	access:private
LDLIBS	../Makefile	/^LDLIBS=$/;"	m
LFLAGS	../Makefile	/^LFLAGS=$/;"	m
LINKER	../Makefile	/^LINKER=g++ -o$/;"	m
OBJDIR	../Makefile	/^OBJDIR=obj$/;"	m
OBJECTS	../Makefile	/^OBJECTS := $(SOURCES:$(SRCDIR)\/%.cpp=$(OBJDIR)\/%.o)$/;"	m
SCHEDULER_H	../include/scheduler.h	2;"	d
SOURCES	../Makefile	/^SOURCES := $(wildcard $(SRCDIR)\/*.cpp)$/;"	m
SRCDIR	../Makefile	/^SRCDIR=src$/;"	m
Scheduler	../include/scheduler.h	/^	Scheduler();				\/\/ default constructor$/;"	p	class:Scheduler	access:public	signature:()
Scheduler	../include/scheduler.h	/^	Scheduler(int mCount, int jCount);	\/\/ set machine and job count while starting$/;"	p	class:Scheduler	access:public	signature:(int mCount, int jCount)
Scheduler	../include/scheduler.h	/^class Scheduler {$/;"	c
Scheduler	../src/scheduler.cpp	/^Scheduler::Scheduler(){$/;"	f	class:Scheduler	signature:()
Scheduler	../src/scheduler.cpp	/^Scheduler::Scheduler(int mCount, int jCount) {$/;"	f	class:Scheduler	signature:(int mCount, int jCount)
Scheduler::Jobs	../include/scheduler.h	/^		std::vector<Job*> Jobs;		\/\/ job list$/;"	m	class:Scheduler	access:private
Scheduler::Scheduler	../include/scheduler.h	/^	Scheduler();				\/\/ default constructor$/;"	p	class:Scheduler	access:public	signature:()
Scheduler::Scheduler	../include/scheduler.h	/^	Scheduler(int mCount, int jCount);	\/\/ set machine and job count while starting$/;"	p	class:Scheduler	access:public	signature:(int mCount, int jCount)
Scheduler::Scheduler	../src/scheduler.cpp	/^Scheduler::Scheduler(){$/;"	f	class:Scheduler	signature:()
Scheduler::Scheduler	../src/scheduler.cpp	/^Scheduler::Scheduler(int mCount, int jCount) {$/;"	f	class:Scheduler	signature:(int mCount, int jCount)
Scheduler::addJob	../include/scheduler.h	/^		void addJob(Job* job);$/;"	p	class:Scheduler	access:public	signature:(Job* job)
Scheduler::addJob	../src/scheduler.cpp	/^void Scheduler::addJob(Job* job) {$/;"	f	class:Scheduler	signature:(Job* job)
Scheduler::getJobCount	../include/scheduler.h	/^		short int getJobCount();		\/\/ return job count$/;"	p	class:Scheduler	access:public	signature:()
Scheduler::getJobCount	../src/scheduler.cpp	/^short int Scheduler::getJobCount() {$/;"	f	class:Scheduler	signature:()
Scheduler::getMachineCount	../include/scheduler.h	/^		short int getMachineCount();		\/\/ return machine count$/;"	p	class:Scheduler	access:public	signature:()
Scheduler::getMachineCount	../src/scheduler.cpp	/^short int Scheduler::getMachineCount() {$/;"	f	class:Scheduler	signature:()
Scheduler::getSchedulingDuration	../include/scheduler.h	/^		short int getSchedulingDuration();	\/\/ return the scheduling duration$/;"	p	class:Scheduler	access:public	signature:()
Scheduler::getSchedulingDuration	../src/scheduler.cpp	/^short int Scheduler::getSchedulingDuration() {$/;"	f	class:Scheduler	signature:()
Scheduler::jobCount	../include/scheduler.h	/^		short int jobCount;		\/\/ how many jobs do we have?$/;"	m	class:Scheduler	access:private
Scheduler::loadFromOrlib	../include/scheduler.h	/^		void loadFromOrlib(std::string fileName);	\/\/ load from orlib format$/;"	p	class:Scheduler	access:public	signature:(std::string fileName)
Scheduler::loadFromOrlib	../src/scheduler.cpp	/^void Scheduler::loadFromOrlib(std::string filename) {}$/;"	f	class:Scheduler	signature:(std::string filename)
Scheduler::loadFromTaillard	../include/scheduler.h	/^		void loadFromTaillard(std::string fileName);	\/\/ load from Taillard format$/;"	p	class:Scheduler	access:public	signature:(std::string fileName)
Scheduler::loadFromTaillard	../src/scheduler.cpp	/^void Scheduler::loadFromTaillard(std::string filename) {}$/;"	f	class:Scheduler	signature:(std::string filename)
Scheduler::machineCount	../include/scheduler.h	/^		short int machineCount;		\/\/ how many machines are there?$/;"	m	class:Scheduler	access:private
Scheduler::schedulingDuration	../include/scheduler.h	/^		short int schedulingDuration;	\/\/ scheduling duration$/;"	m	class:Scheduler	access:private
Scheduler::setJobCount	../include/scheduler.h	/^		void setJobCount(short int jCount);		\/\/ set job count$/;"	p	class:Scheduler	access:public	signature:(short int jCount)
Scheduler::setJobCount	../src/scheduler.cpp	/^void Scheduler::setJobCount(short int jCount) {$/;"	f	class:Scheduler	signature:(short int jCount)
Scheduler::setMachineCount	../include/scheduler.h	/^		void setMachineCount(short int mCount);		\/\/ set machine count$/;"	p	class:Scheduler	access:public	signature:(short int mCount)
Scheduler::setMachineCount	../src/scheduler.cpp	/^void Scheduler::setMachineCount(short int mCount) {$/;"	f	class:Scheduler	signature:(short int mCount)
Scheduler::~Scheduler	../include/scheduler.h	/^	~Scheduler();				\/\/ clean up$/;"	p	class:Scheduler	access:public	signature:()
Scheduler::~Scheduler	../src/scheduler.cpp	/^Scheduler::~Scheduler() {$/;"	f	class:Scheduler	signature:()
TARGET	../Makefile	/^TARGET=job-shop$/;"	m
TASK_H	../include/task.h	2;"	d
Task	../include/task.h	/^	Task();$/;"	p	class:Task	access:public	signature:()
Task	../include/task.h	/^	Task(short int jid, short int mid, short int dur);$/;"	p	class:Task	access:public	signature:(short int jid, short int mid, short int dur)
Task	../include/task.h	/^class Task {$/;"	c
Task	../src/task.cpp	/^Task::Task() {}$/;"	f	class:Task	signature:()
Task	../src/task.cpp	/^Task::Task(short int jid, short int mid, short int dur) {$/;"	f	class:Task	signature:(short int jid, short int mid, short int dur)
Task::Task	../include/task.h	/^	Task();$/;"	p	class:Task	access:public	signature:()
Task::Task	../include/task.h	/^	Task(short int jid, short int mid, short int dur);$/;"	p	class:Task	access:public	signature:(short int jid, short int mid, short int dur)
Task::Task	../src/task.cpp	/^Task::Task() {}$/;"	f	class:Task	signature:()
Task::Task	../src/task.cpp	/^Task::Task(short int jid, short int mid, short int dur) {$/;"	f	class:Task	signature:(short int jid, short int mid, short int dur)
Task::duration	../include/task.h	/^		short int duration;$/;"	m	class:Task	access:private
Task::getDuration	../include/task.h	/^		short int getDuration();$/;"	p	class:Task	access:public	signature:()
Task::getDuration	../src/task.cpp	/^short int Task::getDuration() {$/;"	f	class:Task	signature:()
Task::getJobId	../include/task.h	/^		short int getJobId();$/;"	p	class:Task	access:public	signature:()
Task::getJobId	../src/task.cpp	/^short int Task::getJobId() {$/;"	f	class:Task	signature:()
Task::getMachineId	../include/task.h	/^		short int getMachineId();$/;"	p	class:Task	access:public	signature:()
Task::getMachineId	../src/task.cpp	/^short int Task::getMachineId() {$/;"	f	class:Task	signature:()
Task::jobId	../include/task.h	/^		short int jobId;$/;"	m	class:Task	access:private
Task::machineId	../include/task.h	/^		short int machineId;$/;"	m	class:Task	access:private
Task::setDuration	../include/task.h	/^		void setDuration(short int dur);$/;"	p	class:Task	access:public	signature:(short int dur)
Task::setDuration	../src/task.cpp	/^void Task::setDuration(short int dur) {$/;"	f	class:Task	signature:(short int dur)
Task::setJobId	../include/task.h	/^		void setJobId(short int jid);$/;"	p	class:Task	access:public	signature:(short int jid)
Task::setJobId	../src/task.cpp	/^void Task::setJobId(short int jid) {$/;"	f	class:Task	signature:(short int jid)
Task::setMachineId	../include/task.h	/^		void setMachineId(short int mid);$/;"	p	class:Task	access:public	signature:(short int mid)
Task::setMachineId	../src/task.cpp	/^void Task::setMachineId(short int mid) {$/;"	f	class:Task	signature:(short int mid)
Tasks	../include/job.h	/^		std::vector<Task*> Tasks;$/;"	m	class:Job	access:private
addJob	../include/scheduler.h	/^		void addJob(Job* job);$/;"	p	class:Scheduler	access:public	signature:(Job* job)
addJob	../src/scheduler.cpp	/^void Scheduler::addJob(Job* job) {$/;"	f	class:Scheduler	signature:(Job* job)
addTask	../include/job.h	/^		void addTask(Task* task);$/;"	p	class:Job	access:public	signature:(Task* task)
addTask	../src/job.cpp	/^void Job::addTask(Task* task) {$/;"	f	class:Job	signature:(Task* task)
duration	../include/job.h	/^		short int duration;$/;"	m	class:Job	access:private
duration	../include/task.h	/^		short int duration;$/;"	m	class:Task	access:private
getDuration	../include/task.h	/^		short int getDuration();$/;"	p	class:Task	access:public	signature:()
getDuration	../src/task.cpp	/^short int Task::getDuration() {$/;"	f	class:Task	signature:()
getJobCount	../include/scheduler.h	/^		short int getJobCount();		\/\/ return job count$/;"	p	class:Scheduler	access:public	signature:()
getJobCount	../src/scheduler.cpp	/^short int Scheduler::getJobCount() {$/;"	f	class:Scheduler	signature:()
getJobDuration	../include/job.h	/^		short int getJobDuration();$/;"	p	class:Job	access:public	signature:()
getJobDuration	../src/job.cpp	/^short int Job::getJobDuration() {$/;"	f	class:Job	signature:()
getJobId	../include/job.h	/^		short int getJobId();$/;"	p	class:Job	access:public	signature:()
getJobId	../include/task.h	/^		short int getJobId();$/;"	p	class:Task	access:public	signature:()
getJobId	../src/job.cpp	/^short int Job::getJobId() {$/;"	f	class:Job	signature:()
getJobId	../src/task.cpp	/^short int Task::getJobId() {$/;"	f	class:Task	signature:()
getMachineCount	../include/scheduler.h	/^		short int getMachineCount();		\/\/ return machine count$/;"	p	class:Scheduler	access:public	signature:()
getMachineCount	../src/scheduler.cpp	/^short int Scheduler::getMachineCount() {$/;"	f	class:Scheduler	signature:()
getMachineId	../include/task.h	/^		short int getMachineId();$/;"	p	class:Task	access:public	signature:()
getMachineId	../src/task.cpp	/^short int Task::getMachineId() {$/;"	f	class:Task	signature:()
getSchedulingDuration	../include/scheduler.h	/^		short int getSchedulingDuration();	\/\/ return the scheduling duration$/;"	p	class:Scheduler	access:public	signature:()
getSchedulingDuration	../src/scheduler.cpp	/^short int Scheduler::getSchedulingDuration() {$/;"	f	class:Scheduler	signature:()
getStartTime	../include/job.h	/^		short int getStartTime();$/;"	p	class:Job	access:public	signature:()
getStartTime	../src/job.cpp	/^short int Job::getStartTime() {$/;"	f	class:Job	signature:()
getTask	../include/job.h	/^		Task* getTask(short int taskId);$/;"	p	class:Job	access:public	signature:(short int taskId)
getTask	../src/job.cpp	/^Task* Job::getTask(short int taskId) {$/;"	f	class:Job	signature:(short int taskId)
id	../include/job.h	/^		short int id;$/;"	m	class:Job	access:private
jobCount	../include/scheduler.h	/^		short int jobCount;		\/\/ how many jobs do we have?$/;"	m	class:Scheduler	access:private
jobId	../include/task.h	/^		short int jobId;$/;"	m	class:Task	access:private
loadFromOrlib	../include/scheduler.h	/^		void loadFromOrlib(std::string fileName);	\/\/ load from orlib format$/;"	p	class:Scheduler	access:public	signature:(std::string fileName)
loadFromOrlib	../src/scheduler.cpp	/^void Scheduler::loadFromOrlib(std::string filename) {}$/;"	f	class:Scheduler	signature:(std::string filename)
loadFromTaillard	../include/scheduler.h	/^		void loadFromTaillard(std::string fileName);	\/\/ load from Taillard format$/;"	p	class:Scheduler	access:public	signature:(std::string fileName)
loadFromTaillard	../src/scheduler.cpp	/^void Scheduler::loadFromTaillard(std::string filename) {}$/;"	f	class:Scheduler	signature:(std::string filename)
machineCount	../include/scheduler.h	/^		short int machineCount;		\/\/ how many machines are there?$/;"	m	class:Scheduler	access:private
machineId	../include/task.h	/^		short int machineId;$/;"	m	class:Task	access:private
main	../src/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	signature:(int argc, char* argv[])
printProgramInfo	../src/main.cpp	/^void printProgramInfo(char* argv[]) {$/;"	f	signature:(char* argv[])
printProgramInfo	../src/main.cpp	/^void printProgramInfo(char* argv[]);$/;"	p	file:	signature:(char* argv[])
rm	../Makefile	/^rm=rm -f$/;"	m
schedulingDuration	../include/scheduler.h	/^		short int schedulingDuration;	\/\/ scheduling duration$/;"	m	class:Scheduler	access:private
setDuration	../include/job.h	/^		void setDuration(short int dur);$/;"	p	class:Job	access:public	signature:(short int dur)
setDuration	../include/task.h	/^		void setDuration(short int dur);$/;"	p	class:Task	access:public	signature:(short int dur)
setDuration	../src/job.cpp	/^void Job::setDuration(short int dur) {$/;"	f	class:Job	signature:(short int dur)
setDuration	../src/task.cpp	/^void Task::setDuration(short int dur) {$/;"	f	class:Task	signature:(short int dur)
setJobCount	../include/scheduler.h	/^		void setJobCount(short int jCount);		\/\/ set job count$/;"	p	class:Scheduler	access:public	signature:(short int jCount)
setJobCount	../src/scheduler.cpp	/^void Scheduler::setJobCount(short int jCount) {$/;"	f	class:Scheduler	signature:(short int jCount)
setJobId	../include/task.h	/^		void setJobId(short int jid);$/;"	p	class:Task	access:public	signature:(short int jid)
setJobId	../src/task.cpp	/^void Task::setJobId(short int jid) {$/;"	f	class:Task	signature:(short int jid)
setMachineCount	../include/scheduler.h	/^		void setMachineCount(short int mCount);		\/\/ set machine count$/;"	p	class:Scheduler	access:public	signature:(short int mCount)
setMachineCount	../src/scheduler.cpp	/^void Scheduler::setMachineCount(short int mCount) {$/;"	f	class:Scheduler	signature:(short int mCount)
setMachineId	../include/task.h	/^		void setMachineId(short int mid);$/;"	p	class:Task	access:public	signature:(short int mid)
setMachineId	../src/task.cpp	/^void Task::setMachineId(short int mid) {$/;"	f	class:Task	signature:(short int mid)
setStartTime	../include/job.h	/^		void setStartTime(short int t);$/;"	p	class:Job	access:public	signature:(short int t)
setStartTime	../src/job.cpp	/^void Job::setStartTime(short int t) {$/;"	f	class:Job	signature:(short int t)
startTime	../include/job.h	/^		short int startTime;$/;"	m	class:Job	access:private
~Job	../include/job.h	/^	~Job();$/;"	p	class:Job	access:public	signature:()
~Job	../src/job.cpp	/^Job::~Job() {$/;"	f	class:Job	signature:()
~Scheduler	../include/scheduler.h	/^	~Scheduler();				\/\/ clean up$/;"	p	class:Scheduler	access:public	signature:()
~Scheduler	../src/scheduler.cpp	/^Scheduler::~Scheduler() {$/;"	f	class:Scheduler	signature:()
